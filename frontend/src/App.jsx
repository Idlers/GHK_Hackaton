import React, { useState, useEffect } from 'react';
import AuthModal from './components/AuthModal.jsx';
import './App.css';

const checkBackendConnection = async () => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // –£–º–µ–Ω—å—à–∏–ª —Ç–∞–π–º–∞—É—Ç
    
    const response = await fetch('http://localhost:8000/', {
      method: 'GET',
      mode: 'no-cors', // –ò—Å–ø–æ–ª—å–∑—É–µ–º no-cors –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    console.log('‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
    return true;
    
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
    } else {
      console.log('–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    return false;
  }
};

function App() {
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [isLogin, setIsLogin] = useState(true);
  const [backendStatus, setBackendStatus] = useState('checking');
  const [connectionError, setConnectionError] = useState('');

  useEffect(() => {
    const init = async () => {
      try {
        const isConnected = await checkBackendConnection();
        setBackendStatus(isConnected ? 'online' : 'offline');
        if (!isConnected) {
          setConnectionError('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.');
        }
      } catch (error) {
        setBackendStatus('offline');
        setConnectionError('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.');
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    init();
  }, []);

  const handleLoginClick = () => {
    if (backendStatus === 'offline') {
      alert('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É.');
      return;
    }
    setIsLogin(true);
    setShowAuthModal(true);
  };

  const handleRegisterClick = () => {
    if (backendStatus === 'offline') {
      alert('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É.');
      return;
    }
    setIsLogin(false);
    setShowAuthModal(true);
  };

  const handleCloseModal = () => {
    setShowAuthModal(false);
  };

  const handleRetryConnection = async () => {
    setBackendStatus('checking');
    setConnectionError('');
    
    try {
      const isConnected = await checkBackendConnection();
      setBackendStatus(isConnected ? 'online' : 'offline');
      if (!isConnected) {
        setConnectionError('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.');
      }
    } catch (error) {
      setBackendStatus('offline');
      setConnectionError('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.');
    }
  };

  return (
    <div className="app">
      <div className="main-container">
        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π */}
        <div className={`connection-status ${backendStatus}`}>
          <span className="status-indicator"></span>
          –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: 
          {backendStatus === 'checking' && ' üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...'}
          {backendStatus === 'online' && ' ‚úÖ –û–Ω–ª–∞–π–Ω'}
          {backendStatus === 'offline' && ' ‚ö†Ô∏è –û—Ñ–ª–∞–π–Ω'}
          
          {backendStatus === 'offline' && (
            <button onClick={handleRetryConnection} className="retry-btn">
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
          )}
        </div>

        {connectionError && (
          <div className="connection-warning">
            ‚ö†Ô∏è {connectionError}
          </div>
        )}

        <h1 className="main-title">–°–ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–¢–¨ –†–ò–°–ö–ò</h1>
        
        <div className="button-container">
          {/* –ö–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ */}
          <button 
            className={`login-btn ${backendStatus === 'checking' ? 'checking' : ''}`}
            onClick={handleLoginClick}
          >
            {backendStatus === 'checking' ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏...' : '–í–û–ô–¢–ò'}
          </button>
          <button 
            className={`register-btn ${backendStatus === 'checking' ? 'checking' : ''}`}
            onClick={handleRegisterClick}
          >
            –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
          </button>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ */}
        {backendStatus === 'offline' && (
          <div className="dev-hint">
            <p><strong>–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:</strong></p>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω:</p>
            <code>python manage.py runserver 8000</code>
            <p className="hint-note">
              –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ. 
              –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞.
            </p>
          </div>
        )}

        {/* –î–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–æ–≥–¥–∞ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω */}
        {backendStatus === 'offline' && (
          <div className="demo-info">
            <h3>–î–µ–º–æ-—Ä–µ–∂–∏–º</h3>
            <p>–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.</p>
            <p>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.</p>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –æ–Ω–ª–∞–π–Ω */}
      {showAuthModal && backendStatus === 'online' && (
        <AuthModal 
          isLogin={isLogin} 
          onClose={handleCloseModal}
          onSwitchMode={() => setIsLogin(!isLogin)}
        />
      )}
    </div>
  );
}

export default App;